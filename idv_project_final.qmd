---
title: "IDV project"
author: "Maikki Heijala"
format: 
  dashboard:
    orientation: columns
    expandable: false
---
```{r data_handling}
#| include: false
#| warning: false

library(rjson)
library(dplyr)
library(purrr)

for_rent <- fromJSON(file="for_rent.json")
for_rent2 <- fromJSON(file="for_rent2.json")
for_sale <- fromJSON(file="for_sale.json")
age <- fromJSON(file="age4.json")
education <- fromJSON(file="education3.json")

codes_names <- as.data.frame(
  do.call(
    rbind,
    for_rent$dataset$dimension$Postinumero$category$label
  )
)
codes_names$names <- rownames(codes_names)
names <- codes_names$V1

filtered_for_sale <- 
  tibble(
    info = map(for_sale$data, "key"),
    price = map_chr(for_sale$data, "values")
  ) %>% 
  mutate(
    year = map_chr(info, 1),
    code = map_chr(info, 2) 
  ) %>%
  select(
    code, year, price
  ) %>%
  mutate(
    price = as.integer((price)),
    year = substring(year, 1, 4)
  ) %>%
  na.omit() %>%
  group_by(code, year) %>%
  summarise(price_avg = mean(price)) %>%
  mutate(price_avg = round(price_avg, 0))

filtered_for_rent <- 
  tibble(
    info = map(for_rent2$data, "key"),
    price = map_chr(for_rent2$data, "values")
  ) %>% 
  mutate(
    year = map_chr(info, 1),
    code = map_chr(info, 2) 
  ) %>%
  select(
    code, year, price
  ) %>%
  mutate(
    price = as.integer((price)),
    year = substring(year, 1, 4)
  ) %>%
  na.omit() %>%
  group_by(code, year) %>%
  summarise(price_avg = mean(price)) %>%
  mutate(price_avg = round(price_avg, 0))

prize_max_all = max(filtered_for_sale$price_avg)
prize_min_all = min(filtered_for_sale$price_avg)

ojs_define(names)
ojs_define(for_sale)
ojs_define(for_rent)
ojs_define(age)
ojs_define(education)
ojs_define(filtered_for_sale)
ojs_define(filtered_for_rent)
ojs_define(prize_max_all)
ojs_define(prize_min_all)

```

## Column {width="30%"}

```{r}
#| title: "Price Ranges on  Map"
#| padding: 10px

print("Hello Hey!")

```

## Column

### Row {height=60%}

#### Column

#### Row

```{ojs}
//| title: Area selection

viewof chosen_area = Inputs.select(names)

header_name = chosen_area.split(' (')[0];
chosen_code = header_name.split(' ')[0]

prize_max_area = 67
prize_min_area = 15

```

##### Column

```{ojs valuebox_high_area}
//| padding: 0px
//| fill: true

Plot.plot({
  marks: [
    Plot.frame({fill: "#97fc16"}),
    Plot.text(["\nHighest e/m2 in area"], {frameAnchor: "top", fontSize: 18, fontWeight: "bold"}),
    Plot.text([prize_max_area], {frameAnchor: "middle", fontSize: 50, fontWeight: "bold"})
  ]
})
```

##### Column

```{ojs valuebox_low_area}
//| padding: 0px

Plot.plot({
  marks: [
    Plot.frame({fill: "#fc9016" }),
    Plot.text(["\nLowest e/m2 in area"], {frameAnchor: "top", fontSize: 18, fontWeight: "bold"}),
    Plot.text([prize_min_area], {frameAnchor: "middle", fontSize: 50, fontWeight: "bold"})
  ]
})
```

#### Row

```{ojs}
//| title: Market type selection

viewof market = Inputs.radio(["for rent", "for sale"], {value: "for rent"})

```

##### Column

```{ojs valuebox_high_finland}
//| padding: 0px

Plot.plot({
  marks: [
    Plot.frame({fill: "#ece5dd" }),
    Plot.text(["\nHighest e/m2 in Finland"], {frameAnchor: "top", fontSize: 18, fontWeight: "bold"}),
    Plot.text([prize_max_all], {frameAnchor: "middle", fontSize: 50, fontWeight: "bold"})
  ]
})
```

##### Column

```{ojs valuebox_low_finland}
//| padding: 0px

Plot.plot({
  marks: [
    Plot.frame({fill: "#ece5dd" }),
    Plot.text(["\nLowest e/m2 in Finland"], {frameAnchor: "top", fontSize: 18, fontWeight: "bold"}),
    Plot.text([prize_min_all], {frameAnchor: "middle", fontSize: 50, fontWeight: "bold"})
  ]
})
```

#### Column

```{ojs}
//| title: 5 year development

html`<h4>${header_name}</h4>`

function get_linedata(m) {
  if (m == "for sale") {
    return [filtered_for_sale, 10000]
  }
  return [filtered_for_rent, 50]
}

linedata = get_linedata(market)
data = transpose(linedata[0])
y_limit = linedata[1]

t_linedata = data.filter(row => row.code === chosen_code)

Plot.plot({
  marginTop: 100,
  marginRight: 50,
  marginBottom: 50,
  marginLeft: 50,
  height: 450,
  width: 350,
  y: {
    grid: true,
    domain: [0, y_limit],
  },
  x: {
    domain: [2019, 2023],
    tickFormat: "",
    interval: 1
  },
  marks: [
    Plot.ruleY([0]),
    Plot.dot(t_linedata, {x: "year", y: "price_avg", channels: {year: "year", price_avg: "price"}, tip: true}),
    Plot.areaY(t_linedata, {x: "year", y: "price_avg", fillOpacity: 0.1}),
    Plot.lineY(t_linedata, {x: "year", y: "price_avg"}),
    Plot.frame()
  ]
})


```

### Row {.tabset}

```{ojs}
//| title: Age

agedata = age.data.filter(row => row.key === chosen_code)
agedata

```

::: {.card title="Age Figure"}
0-2-vuotiaat: ![](universal-access.svg) ![](universal-access.svg) 
:::

```{ojs}
//| title: Education

edudata = education.data.filter(row => row.key === chosen_code)
edudata

```
